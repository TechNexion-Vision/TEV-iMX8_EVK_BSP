From 14ec1576ab14b01e8aa96283d8a38ef488f45b74 Mon Sep 17 00:00:00 2001
From: Leo Wang <leo.wang@technexion.com>
Date: Wed, 17 Mar 2021 19:06:34 +0800
Subject: [PATCH 02/23] media: ov5640: change format of calibration data in otp
 flash

Change data format of calibration data.Add product name, product
version, checksum field, etc...

Driver will verify that calibration data in otp flash is valid or
not via checksum.
---
 drivers/media/i2c/ov5640.c | 86 ++++++++++++++++++++++++++++++++++----
 1 file changed, 77 insertions(+), 9 deletions(-)

diff --git a/drivers/media/i2c/ov5640.c b/drivers/media/i2c/ov5640.c
index ccb187ebbc8a..13bc2e9a5c8b 100644
--- a/drivers/media/i2c/ov5640.c
+++ b/drivers/media/i2c/ov5640.c
@@ -1912,21 +1912,87 @@ static int ov5640_set_mode(struct ov5640_dev *sensor)
 static int ov5640_set_framefmt(struct ov5640_dev *sensor,
 			       struct v4l2_mbus_framefmt *format);
 
+/*
+otp_header, ver1
+{
+	1byte: product_name_len;
+	dynamic len: product_name_string;
+	1byte: product_ver;
+	4byte: otp_data_len;
+	1byte: checksum;
+}
+*/
+static void ov5640_read_otp(struct ov5640_dev *sensor)
+{
+	struct i2c_client *client = sensor->i2c_client;
+	struct nvmem_device *otp_flash_nvmem;
+	int __sum;
+	int i;
+	u8 header_version;
+	u8 product_name_len;
+	u8 *product_name;
+	u8 product_version;
+	u32 otp_data_len;
+	u8 otp_data_checksum;
+	u8 *otp_data;
+
+	otp_flash_nvmem = devm_nvmem_device_get(&client->dev, "calib-data");
+	if (IS_ERR(otp_flash_nvmem)) {
+		dev_err(&client->dev, "find not otp flash setting\n");
+		return;
+	}
+
+	nvmem_device_read(otp_flash_nvmem, 0, 1, &header_version);
+	if (header_version == 1) {
+		nvmem_device_read(otp_flash_nvmem, 1, 1, &product_name_len);
+		product_name = kzalloc(product_name_len + 1, GFP_KERNEL);
+		nvmem_device_read(otp_flash_nvmem, 2,
+				  product_name_len, product_name);
+		nvmem_device_read(otp_flash_nvmem, 2 + product_name_len,
+				  1, &product_version);
+		nvmem_device_read(otp_flash_nvmem, 2 + product_name_len + 1,
+				  4, (u8 *)&otp_data_len);
+		nvmem_device_read(otp_flash_nvmem, 2 + product_name_len + 1 + 4,
+				  1, (u8 *)&otp_data_checksum);
+		otp_data = devm_kmalloc(&client->dev, otp_data_len, GFP_KERNEL);
+		nvmem_device_read(otp_flash_nvmem, 2 + product_name_len + 1 + 4 + 1,
+				  otp_data_len, otp_data);
+
+		dev_info(&client->dev, "Product name: %s, Version %d\n",
+			 product_name, product_version);
+
+		for(i = __sum = 0 ; i < otp_data_len ; i++) {
+			__sum += otp_data[i];
+		}
+		__sum %= 0x100;
+
+		dev_dbg(&client->dev, "len %x, checksum %x, sum %x\n",
+			otp_data_len, otp_data_checksum, __sum);
+
+		if (__sum == otp_data_checksum) {
+			dev_info(&client->dev, "overwrite setting\n");
+			ov5640_mode_init_data.reg_data =
+				(struct reg_value *)otp_data;
+			ov5640_mode_init_data.reg_data_size =
+				otp_data_len / sizeof(struct reg_value);
+		} else {
+			dev_err(&client->dev, "checksum is not match\n");
+		}
+
+		kfree(product_name);
+	} else {
+		dev_err(&client->dev, "otp data is invalid\n");
+	}
+
+	devm_nvmem_device_put(&client->dev, otp_flash_nvmem);
+}
+
 /* restore the last set video mode after chip power-on */
 static int ov5640_restore_mode(struct ov5640_dev *sensor)
 {
-	struct i2c_client *client = sensor->i2c_client;
-	struct nvmem_cell *cell;
-	size_t len;
 	int ret;
 
 	/* first load the initial register values */
-	cell = nvmem_cell_get(&client->dev, "calibration-data");
-	if (! IS_ERR(cell)) {
-		ov5640_mode_init_data.reg_data = (struct reg_value *)nvmem_cell_read(cell, &len);
-		ov5640_mode_init_data.reg_data_size = len / sizeof(struct reg_value);
-		nvmem_cell_put(cell);
-	}
 
 	ret = ov5640_load_regs(sensor, &ov5640_mode_init_data);
 	if (ret < 0)
@@ -3269,6 +3335,8 @@ static int ov5640_probe(struct i2c_client *client)
 	if (ret)
 		goto entity_cleanup;
 
+	ov5640_read_otp(sensor);
+
 	ret = ov5640_init_controls(sensor);
 	if (ret)
 		goto entity_cleanup;
-- 
2.25.1

